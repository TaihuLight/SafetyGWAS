enclave {
	//include "user_types.h"
    trusted {
        /* define ECALLs here. */
		public void foo([in, size=len] char* buf_in,[out, size=len] char* buf, int len);
		public void hammingDistance([in, size=len_in] char** input, [user_check] int* output,int query,  int len_out,int len_in,int rowcount);
		public void euclidieanDistance([in, size=len_in] char** input, [user_check] int* output,int query,  int len_out,int len_in,int rowcount);
		public void ld([in, size=len_ldmatrix] char** input, [out, size=len_ldResult] char* ldResult, int len_ldmatrix, int len_ldResult);
		public void hwe([in, size=len_hwematrix] char** input, [out, size=len_hweResult] char* hweResult, int len_hwematrix, int len_hweResult);
		public void catt([in, size=len_cattmatrix] char** input, [out, size=len_cattResult] char* cattResult, int len_cattmatrix, int len_cattResult);
		public void fet([in, size=len_fetmatrix] char** input, [out, size=len_fetResult] char* fetResult, int len_fetmatrix, int len_fetResult);

		/*public void ld([in, size=len_N_AB] char* N_AB, [in, size=len_N_Ab] char* N_Ab, [in, size=len_N_aB] char* N_aB, [in, size=len_N_ab] char* N_ab, [out, size=len_ldResult] char* ldResult, 
		int len_N_AB, int len_N_Ab, int len_N_aB, int len_N_ab, int len_ldResult);*/
    };

    untrusted {
        void ocall_print_string([in, string] const char *str);
    
    };
};
